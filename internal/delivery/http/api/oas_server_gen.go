// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	AuthHandler
	UserHandler
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// AuthHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Auth
type AuthHandler interface {
	// LoginPost implements POST /login operation.
	//
	// Login and obtain tokens.
	//
	// POST /login
	LoginPost(ctx context.Context, req *LoginRequest) (*TokenResponse, error)
	// RefreshPost implements POST /refresh operation.
	//
	// Refresh access token.
	//
	// POST /refresh
	RefreshPost(ctx context.Context, req *RefreshPostReq) (*TokenResponse, error)
	// SignupPost implements POST /signup operation.
	//
	// Register a new user.
	//
	// POST /signup
	SignupPost(ctx context.Context, req *SignupRequest) (*User, error)
}

// UserHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: User
type UserHandler interface {
	// UsersGet implements GET /users operation.
	//
	// List all users.
	//
	// GET /users
	UsersGet(ctx context.Context) ([]User, error)
	// UsersIDDelete implements DELETE /users/{id} operation.
	//
	// Delete a user.
	//
	// DELETE /users/{id}
	UsersIDDelete(ctx context.Context, params UsersIDDeleteParams) error
	// UsersIDGet implements GET /users/{id} operation.
	//
	// Get a user by id.
	//
	// GET /users/{id}
	UsersIDGet(ctx context.Context, params UsersIDGetParams) (*User, error)
	// UsersIDPatch implements PATCH /users/{id} operation.
	//
	// Update a user.
	//
	// PATCH /users/{id}
	UsersIDPatch(ctx context.Context, req *UserUpdate, params UsersIDPatchParams) (*User, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
