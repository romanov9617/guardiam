// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// LoginPost implements POST /login operation.
//
// Login and obtain tokens.
//
// POST /login
func (UnimplementedHandler) LoginPost(ctx context.Context, req *LoginRequest) (r *TokenResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// RefreshPost implements POST /refresh operation.
//
// Refresh access token.
//
// POST /refresh
func (UnimplementedHandler) RefreshPost(ctx context.Context, req *RefreshPostReq) (r *TokenResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// SignupPost implements POST /signup operation.
//
// Register a new user.
//
// POST /signup
func (UnimplementedHandler) SignupPost(ctx context.Context, req *SignupRequest) (r *User, _ error) {
	return r, ht.ErrNotImplemented
}

// UsersGet implements GET /users operation.
//
// List all users.
//
// GET /users
func (UnimplementedHandler) UsersGet(ctx context.Context) (r []User, _ error) {
	return r, ht.ErrNotImplemented
}

// UsersIDDelete implements DELETE /users/{id} operation.
//
// Delete a user.
//
// DELETE /users/{id}
func (UnimplementedHandler) UsersIDDelete(ctx context.Context, params UsersIDDeleteParams) error {
	return ht.ErrNotImplemented
}

// UsersIDGet implements GET /users/{id} operation.
//
// Get a user by id.
//
// GET /users/{id}
func (UnimplementedHandler) UsersIDGet(ctx context.Context, params UsersIDGetParams) (r *User, _ error) {
	return r, ht.ErrNotImplemented
}

// UsersIDPatch implements PATCH /users/{id} operation.
//
// Update a user.
//
// PATCH /users/{id}
func (UnimplementedHandler) UsersIDPatch(ctx context.Context, req *UserUpdate, params UsersIDPatchParams) (r *User, _ error) {
	return r, ht.ErrNotImplemented
}

// NewError creates *ErrorStatusCode from error returned by handler.
//
// Used for common default response.
func (UnimplementedHandler) NewError(ctx context.Context, err error) (r *ErrorStatusCode) {
	r = new(ErrorStatusCode)
	return r
}
